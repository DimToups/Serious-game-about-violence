@startuml
skinparam style strictuml
skinparam classAttributeIconSize 0
hide enum methods
hide empty members

package components{
    package animated{
        abstract class AnimatedComponent <<abstract>> extends components.classic.GameComponent{
            - currentFrame : Integer
            - durationList : Float[]
            - ramainingTime : Float
            - isRunning : Boolean
            + <<create>> AnimatedComponent(position : Vector2D, frames : T[], timePerFrame : Float)
            + <<create>> AnimatedComponent(position : Vector2D, frames : T[], timePerFrame : Float[])
            + nextFrame()
            + tick(aps : Integer)
            + getCurrentFrame() : T
            + isRunning() : Boolean
            + pause()
            + resume()
        }
        abstract class AnimatedImageComponent <<abstract>> extends AnimatedComponent{
            + <<create>> AnimatedImageComponent(position : Vector2D, secondsPerImage : Float, animation : Animations)
            + nextFrame()
            + render()
        }
        abstract class AnimatedTextComponent <<abstract>> extends AnimatedComponent{
            + <<create>> AnimatedTextComponent(position : Vector2D, text : AnimatedText, timePerFrame : Float)
            + <<create>> AnimatedTextComponent(positon : Vector2D, text : AnimatedText, durationList : Float[])
            + render (g : Graphic)
        }
    }
    package classic{
        abstract class GameComponent <<abstract>>{
            - frame : T
            - duration : Float
            + isHovered : Boolean
            + <<create>> GameComponent(frame : T)
            + <<create>> GameComponent(frame : T, position : Vector2D)
            + <<create>> GameComponent(frame : T, position : Vector2D, size : Vector2D)
            + moveTo(target : Vector2D, duraction : Float)
            + move(tps : Integer)
            + getFrame() : T
            + getPosition() : Vector2D
            + getSize() : Vector2D
            + isHovered() : Boolean
            + setFrame(frame : T)
            + setSize(size : Vector2D)
            + setIsHovered(isHovered : Boolean)
            + isMoving(): Boolean
            + getRemainingDuration() : Float
            + getTraget() : Vector2D
            + render(g : Graphic) {abstract}
            + tick(aps : Integer) {abstract}
            + onClick(buttonMouseButtons) {abstract}
            + onHover() {abstract}
            + onHoverLost() {abstract}
            + onWindowResized(size : Vector2D)
        }
        abstract class ImageComponent <<abstract>> extends GameComponent{
            + <<create>> ImageComponent(image : Images)
            + <<create>> ImageComponent(image : Images, position : Vector2D)
            + <<create>> ImageComponent(image : Images, position : Vector2D, size : Vector2D, center : Boolean)
            + resize(size : Vector2D, centerImage : Boolean)
            + resize(size : Vector2D, centerImage : Boolean, centerComponent : Boolean)
            + crop(x : Integer, y : Integer, width : Integer, height : Integer)
            + render(g : Graphic)
        }
        abstract class TextComponent <<abstract>> extends GameComponent{
            + <<create>> TextComponent(frame : T)
            + <<create>> TextComponent(frame : T, position : Vector2D)
            + render(g : Graphic)
        }
    }
    package mixed{
        abstract class ComposedComponent <<abstract>> extends components.classic.GameComponent{
            + <<create>> ComposedComponent(position : Vector2D, components : GameComponent[])
            + move(tps : Integer)
            + render(g : Graphic)
            + tick(aps : Integer)
            + onClick(button : MouseButtons)
            + onHover()
            + onHoverLost()
            + onWindowResized(size : Vector2D)
        }
    }
    package sample{
        package texts{

        }
        abstract class SampleAnimatedImageComponent <<abstract>> extends components.animated.AnimatedImageComponent{
            + <<create>> SampleAnimatedImageComponent(position : Vector2D)
            + onClick(button : MouseButtons)
            + onHover()
            + onHoverLost()
            + onWindowResized(size : vector2D)
        }
        abstract class SampleAnimatedTextComponent <<abstract>> extends components.animated.AnimatedTextComponent{
            + <<create>> SampleAnimatedTextComponent(position : Vector2D)
            + onClick(button : MouseButtons)
            + onHover()
            + onHoverLost()
            + onWindowResized(size : vector2D)
        }
        abstract class SampleBackgroundComponent <<abstract>> extends components.classic.ImageComponent{
            + <<create>> SampleBackgroundComponent()
            + tick(aps : Integer)
            + onClick(button : MouseButtons)
            + onHoer()
            + onHover()
            + onHoverLost()
            + onWindowResized(size Vector2D)
        }
        abstract class SampleImageComponent <<abstract>> extends components.classic.ImageComponent{
            + <<create>> SampleImageComponent(position : Vector2D, size : Vector2D)
            + tick(aps : Integer)
            + onClick(button : MouseButtons)
            + onHoer()
            + onHover()
            + onHoverLost()
            + onWindowResized(size Vector2D)
        }
        abstract class SampleTextComponent <<abstract>> extends components.classic.TextComponent{
            + <<create>> SampleTextComponent(position : Vector2D)
            + tick(aps : Integer)
            + onClick(button : MouseButtons)
            + onHoer()
            + onHover()
            + onHoverLost()
            + onWindowResized(size Vector2D)
        }
    }
    package texts{
        class AnimatedText {
            + <<create>> AnimatedText(frames : Text[])
            + getFrames() : Text[]
            + addFrame(frame : Text)
        }
        class Text{
            + <<create>> Text(parts : TextPart[])
            + addPart(part : TextPart)
            + getParts() : TextPart[]
        }
        class TextPart{
            - text : String
            - color : Color
            - font : Font
            + <<create>> Textpart(text : String, color : Color, font : Font)
            + getText() : String
            + setText(text : String)
            + setColor(color : Color)
            + getFont() : Font
            + setFont(font : Font)
        }
    }
}

package game{
    package enums{
        enum MouseButtons <<enum>>{
            LEFT
            MIDDLE
            RIGHT
            - value : Integer
            <<create>> MouseButtons(value : Integer)
            + getValue() : Integer
            + from(value : Integer) : MouseButtons {static}
        }
    }
    class GameEngine{
        - devMode : Boolean
        - componentsLock : ReentrantLock
        + <<create>> GameEngine(devMode : Boolean)
        - intScene()
        + safeListOperation(operation : GameComponent[])
        + isDevMode() : Boolean
    }
    class GameWindow{
        + <<create>> GameWindow()
    }
    class GraphicEngine{
        + font : Font {static}
        - resizeTimer : Timer
        + <<create>> GraphicEngine(gameEngine : GameEngine)
        - resize()
        - onClick(e : MouseEvent)
        - tick()
        - getReversedComponentsList() : GameComponent[]
        - triggerHover(mouseVector : Vector2D, component : GameComponent, hoverFound : Boolean) : Boolean
        # paintComponent(g : Graphic)
        - drawComponents(g : Graphic)
    }
}

package ressources{
    package images{
        enum Animations <<enum>>{
            - path : String
            - frameCount : Integer
            - images : BufferedImages[]
            <<create>> Animations(path : String, frameCount : Integer)
            - loadImages()
            + getCopy() : BufferedImage[]
        }
        enum Images <<enum>>{
            - path : String
            - sizeCache : Boolean
            - image : BufferedImage
            - sizeCachemap : Vector2D[], BufferedImage[]
            <<create>> Images(path : String, sizeCache : Boolean)
            - loadImages()
            + getCopy() : BufferedImage
            + getCopy(size : Vector2D, center : Boolean) : BufferedImage
            - deepCopy(bi : BufferedImage) : BufferedImage {static}
            + resize(image : BufferedImage, size : Vector2D, center : Boolean) : BufferedImage {static}
        }
    }
    package sounds{
         enum Sounds <<enum>>{
            - path : String
            - clip : Clip
            - lineListener : LineListener
            <<create>> Sound(path : String)
            - loadSound()
            + play()
            + playBackground()
            + stop()
            + setVolume(volume : Float)
            + restart()
         }
    }
}

package tools{
    class LogFormatter{
        - dateFormat : SimpleDateFormat
        + format(record : LogRecord) : String
    }
    class Runner{
        - name : String
        - action : Runnable
        - aps : Double
        - stability : boolean
        - running : Boolean
        - paused : Boolean
        - passedActions : Integer
        - apsQueue : Long[]
        - queueLock : ReentrantLock
        + <<create>> Runner(name : String, action : Runnable)
        + <<create>> Runner(name : String, action : Runnable, aps : Integer, stabilized : Boolean)
        + run()
        - computerAverage() : Double
        + setPaused(paused : Boolean)
        + stopRunner()
        + setAps(aps : Integer)
        + isRunning() : Boolean
        + getPassedActions() : Integer
        + getCurrentAps() : Integer
        + getAps() : Integer
    }
    class STimer{
        - timers : Long[], Long[] {static}
        - lastId : Long {static}
        + start() : Long {static}
        + stop(id : Long) : Long {static}
    }
    class Vector2D{
        + x : Double
        + y : Double
        + <<create>> Vector2D()
        + <<create>> Vector2D(x : Double, y : Double)
        + <<create>> Vector2D(v : Vector2D)
        + set(x : Double, y : Double)
        + set(v : Vector2D)
        + setZero()
        + getComponents() : Double[]
        + getLength() : Double
        + getLengthSq() : Double
        + distanceSq(vx : Double, vy : Double) : Double
        + distanceSq(v : Vector2D) : Double
        + distance(vx : Double, vy : Double) : Double
        + distance(v : vector2D) : Double
        + getAngle()  : Double
        + normalize()
        + getNormalized() : Vector2D
        + normalize(v : Vector2D) : Vector2D {static}
        + toCartesian(magnitude : Double, angle : Double) {static}
        + add(v : Vector2D)
        + add(vx : Double, vy : Double)
        + getAdded(v : Vector2D) : Vector2D
        + getAdded(vx : Double, vy : Double) : Vector2D
        + add(v1 : Vector2D, v2 : Vector2D) : Vector2D {static}
        + substract(v : Vector2D)
        + substract(vx : Double, vy : Double)
        + getSubstracted(v : Vector2D) : Vector2D
        + getSubstracted(vx : Double, vy : Double) : Vector2D
        + substract(v1 : Vector2D, v2 : Vector2D) : Vector2D {static}
        + multiply(v : Vector2D)
        + multiply(scalar : vector2D)
        + getMultiplied(v : Vector2D) : Vector2D
        + getMultiplied(vx : Double, vy : Double) : Vector2D
        + multiply(v1 : Vector2D, v2 : Vector2D) : Vector2D {static}
        + divide(v : Vector2D)
        + divide(scalar : vector2D)
        + getDivided(v : Vector2D) : Vector2D
        + getDivided(vx : Double, vy : Double) : Vector2D
        + divide(v1 : Vector2D, v2 : Vector2D) : Vector2D {static}
        + getperp() : vector2D
        + dot(v : Vector2D) : Double
        + dot(vx : Double, vy : Double) : Double
        + dot(v1 : Vector2D, v2 : Vector2D) : Double {static}
        + cross(v : Vector2D) : Double
        + cross(vx : Double, vy : Double) : Double
        + cross(v1 : Vector2D, v2 : Vector2D) : Double {static}
        + project(v : Vector2D) : Double
        + project(vx : Double, vy : Double) : Double
        + project(v1 : Vector2D, v2 : Vector2D) : Double {static}
        + getProjectedVector(v : Vector2D) : Vector2D
        + getProjectedVector(vx : Double, vy : Double) : Vector2D
        + getProjectedVector(v1 : Vector2D, v2 : Vector2D) : Vector2D {static}
        + rotateBy(angle : Double)
        + getRotatedBy(angle : Double) : vector2D
        + rotateTo(angle : Double)
        + getRotatedTo(angle : Double) : vector2D
        + reverse()
        + getReversed() : Vector2D
        + isBetween(v1 : Vector2D, v2 : Vector2D) : Boolean
        + isBetween(target : Vector2D, v1 : Vector2D, v2 : Vector2D) : Boolean {static}
        + toPositive()
        + getToPositive() : vector2D
        + toPositive(v : vector2D) : Vector2D {static}
        + toNegative()
        + getToNegative() : vector2D
        + toNegative(v : vector2D) : Vector2D {static}
        + clone() : Vector2D
        + equals(obj : Object) : Boolean
        + hashCode() : Integer
        + toString() : String
    }
}

class Main{
    - logger : Logger {static}
    + main(args : String[]) {static}
    - setupLogger(devMode : Boolean) {static}
    + getLogger() : Logger {static}
    + getGameEngine() : GameEngine {static}
}

'Utilisations de la class Vector2D
tools.Vector2D <.. components.animated.AnimatedComponent : <<uses>>
tools.Vector2D <.. components.animated.AnimatedImageComponent : <<uses>> 'utile ?
tools.Vector2D <.. components.animated.AnimatedTextComponent : <<uses>> 'utile ?
tools.Vector2D <.. components.classic.TextComponent : <<uses>> 'utile ? (son parent, GameComponent a un attribut Vector2D)
tools.Vector2D <.. components.classic.ImageComponent : <<uses>> 'utile ? (son parent, GameComponent a un attribut Vector2D)
tools.Vector2D <.. components.mixed.ComposedComponent : <<uses>> 'utile ? (son parent, GameComponent a un attribut Vector2D)
tools.Vector2D <.. components.sample.SampleAnimatedImageComponent : <<uses>> 'utile ? (son parent, AnimatedImageComponent utilises lui aussi la classe Vector2D)
tools.Vector2D <.. components.sample.SampleAnimatedTextComponent : <<uses>> 'utile ? (son parent, AnimatedTextComponent utilises lui aussi la classe Vector2D)
tools.Vector2D <.. components.sample.SampleImageComponent : <<uses>> 'utile ? (son parent, ImageComponent utilises lui aussi la classe Vector2D)
tools.Vector2D <.. components.sample.SampleTextComponent : <<uses>> 'utile ? (son parent, TextComponent utilises lui aussi la classe Vector2D)
tools.Vector2D <.. ressources.images.Images : <<uses>>


components.classic.GameComponent "1" o-> "1\n- position" tools.Vector2D
components.classic.GameComponent "1" o-> "1\n- size" tools.Vector2D
components.classic.GameComponent "1" o-> "1\n- target" tools.Vector2D
components.classic.GameComponent ..> game.enums.MouseButtons : <<uses>>

components.classic.ImageComponent "1" o-> "1\n imageType" ressources.images.Images

components.classic.TextComponent .> components.texts.Text : <<uses>>

components.texts.AnimatedText "1" o-> "*\n- frames" Text

components.texts.Text "1" o-> "*\n- parts" TextPart

game.GameEngine "1" o-> "*\n- components" components.classic.GameComponent

game.GraphicEngine "1" o-> "1\n- gameEngine" tools.Runner
game.GraphicEngine "1" o-> "1\n- fpsRunner" tools.Runner

Main "1" *-> "1\n- gameEngine" game.GameEngine

@enduml