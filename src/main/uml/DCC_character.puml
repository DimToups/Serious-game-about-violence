@startuml
skinparam classAttributeIconSize 0

package character{
    package identity{
        package enums{
            enum FirstName{
                ..Fields..
                - firstName : String
                ..Methods..
                <<create>> FirstName(firstname : FirstName, gender : Gender, origin : Origin)
                + getFirstName() : String
                + getGender() : Gender
                + getOrigin() : Origin
                + getAllOriginFirstName(origin : Origin) : FirstName*
                + getAllMaleFirstName() : FirstName*
                + getAllMaleFirstName(firstnames : FirstName) : FirstName*
                + getAllFemaleFirstName() : FirstName*
                + getAllFemaleFirstName(firstnames : FirstName) : FirstName*
            }
            enum Gender{
                ..Values..
                MALE
                FEMALE
                UNKNOWN
            }
            enum LastName{
                ..Methods..
                <<create>> LastName(origin : Origin)
                + getOrigin() : Origin
                + getAllOriginLastNames(origin : Origin) : LastName*
                + cleanName() : String
            }
            enum Origin{
                ..Values..
                FRENCH
                GERMAN
                ARABIC
                SPANISH
                ASIAN
                AMERICAN
                RUSSIAN
                AFRICAN
                ..Methods..
                + cleanName() : String
            }
        }

        class IdentityManager{
            ..Fields..
            - rand : Random {static}
            ..Methods..
            + generateOrigin() : Origin {static}
            + generateMaleFirstName() : FirstName {static}
            + generateFemaleFirstName() : FirstName {static}
            + generateLastName() : LastName {static}
            + generateInteger() : Integer {static}
        }
    }

    package personality{
        package enums{
            package pastFacts{
                enum CommonPastFacts{
                    ..Fields..
                    - title : String
                    - description : String
                    ..Methods..
                    <<create>> CommonPastFacts(title : String, description : String, leaningMentalStrength : MentalStrength)
                    + getTitle() : String
                    + getDescription() : String
                    + getLeaningMentalStrength() : MentalStrength
                }
                enum GenderPastFacts{
                    ..Fields..
                    - title : String
                    - description : String
                    ..Methods..
                    <<create>> GenderPastFacts(title : String, description : String, leaningMentalStrength : MentalStrength, overridingThoughts : GenderThoughts, concernedGender : Gender)
                    + getTitle() : String
                    + getDescription() : String
                    + getLeaningMentalStrength() : MentalStrength
                    + getOverridingThoughts() : GenderThoughts
                    + getAllGenderPastFacts(g : Gender) : GenderPastFacts*
                    + getAllGenderPastFacts(g : Gender, genderPastFacts : GenderPastFacts*) : GenderPastFacts*
                }
                enum OriginPastFacts{
                    ..Fields..
                    - title : String
                    - description : String
                    ..Methods..
                    <<create>> OriginPastFacts(title : String, description : String, leaningMentalStrength : MentalStrength, overridingThoughts : OriginThoughts, concernedOrigins : Origin)
                    + getTitle() : String
                    + getDescription() : String
                    + getLeaningMentalStrength() : MentalStrength
                    + getOverridingThoughts() : OriginThoughts
                    + getAllOriginPastFacts(o : Origin) : OriginPastFacts*
                    + getAllOriginPastFacts(o : Origin, orifinPastFacts : OriginPastFacts*) : OriginPastFacts*
                }
                enum SexualOrientationPastFacts{
                    ..Fields..
                    - title : String
                    - description : String
                    ..Methods..
                    <<create>> SexualOrientationPastFacts(title : String, description : String, leaningMentalStrength : MentalStrength, overridingThoughts : SexualOrientationThoughts, overridingSexualOrientation : SexualOrientation)
                    + getTitle() : String
                    + getDescription() : String
                    + getLeaningMentalStrength() : MentalStrength
                    + getOverridingThoughts() : SexualOrientationThoughts
                    + getOverridingSexualOrientation() : SexualOrientation
                }
            }
            package thought{
                enum GenderThoughts{
                    ..Fields..
                    - title : String
                    - description : String
                    ..Methods..
                    <<create>> GenderThoughts(title : String, description : String)
                    + getTile() : String
                    + getDescription() : String
                    + cleanName() : String
                }
                enum OriginThoughts{
                    ..Fields..
                    - title : String
                    - description : String
                    ..Methods..
                    <<create>> OriginThoughts(title : String, description : String)
                    + getTile() : String
                    + getDescription() : String
                    + cleanName() : String
                }
                enum SexualOrientationThoughts{
                    ..Fields..
                    - title : String
                    - description : String
                    ..Methods..
                    <<create>> SexualOrientationThoughts(title : String, description : String)
                    + getTile() : String
                    + getDescription() : String
                    + cleanName() : String
                }
            }

            enum MentalStrength{
                ..Values..
                WEAK
                NORMAL
                BOLD
            }
            enum SexualOrientation{
                ..Values..
                STRAIGHT
                GAY
                LESBIAN
                BISEXUAL
            }
        }

        class PersonalityManager{
            ..Fields..
            - rand : Random {static}
            ..Methods..
            + generateCommonPastFact() : CommonPastFacts
            + generateGenderPastFact() : GenderPastFacts
            + generateOriginPastFact() : OriginPastFacts
            + generateSexualOrientationPastFact() : SexualOrientationPastFacts
            + generateMentalStrength() : MentalStrength
            + generateSexualOrientation() : SexualOrientation
            + generateOriginThoughts() : OriginThoughts
            + generateGenderThoughts() : GenderThoughts
            + GenerateSexualOrientationThoughts() : SexualOrientationThoughts

        }
    }

    package style{
        package enums{
            enum BeardEnum{
                ..Fields..
                - name : String
                - image : Images
                ..Methods..
                <<create>> BeardEnum(name : String, color : HairColor, image : Images)
                + getAllColoredAssets(color : HairColor) : BeardEnum*
                + getAllColoredAssets(color : HairColor, beards : BeardEnum*) : BeardEnum*
                + getName() : String
                + getColor() : HairColor
                + getImage() : Images
                + getBeardEnum(image : Images) : BeardEnum
            }
            enum EyeColor{
                ..Values..
                BLUE
                LIGHT_BLUE
                BROWN
                GREEN
                YELLOW
            }
            enum EyesEnum{
                ..Fields..
                - name : String
                - image : Images
                ..Methods..
                <<create>> EyesEnum(name : String, color : EyeColor, image : Images, origin : Origin*)
                + getAllColoredAssets(color : EyeColor) : EyesEnum*
                + getAllColoredAssets(color : EyeColor, eyes : EyesEnum*) : EyesEnum*
                + getAllGenderAssets(gender : Gender) : EyesEnum
                + getAllGenderAssets(gender : Gender, eyes : EyesEnum) : EyesEnum
                + getAllOriginAssets(origin : Origin) : EyesEnum
                + getAllOriginAssets(origin : Origin, eys : EyesEnum) : EyesEnum
                + getName() : String
                + getColor() : EyeColor
                + getImage() : Images
                + getGender() : Gender
                + getOrigins() : Origin*
                + getCommonEyesOrigins() : Origin*
                + getAsianEyesOrigins() : Origin*
                + getEyesEnum(image : Images) : EyesEnum
            }
            enum HairColor{
                ..Values..
                BLACK
                DARK_BROWN
                BROWN
                BLOND
                GINGER
                WHITE
                BLUE
                PINK
            }
            enum HairEnum{
                ..Fields..
                - name : String
                - image : Images
                ..Methods..
                <<create>> HairEnum(name : String, color : HairColor, image : Images, gender : Gender)
                + getAllColoredAssets(color : HairColor) : HairEnum*
                + getAllColoredAssets(color : HairColor, hairs : HairEnum) : HairEnum*
                + getAllGenderAssets(gender : Gender) : HairEnum
                + getAllGenderAssets(gender : Gender, hairs : HairEnum) : HairEnum
                + getName() : String
                + getImage() : Images
                + getGender() : Gender
                + getHairEnum(image : Images)
            }
            enum ShirtEnum{
                ..Fields..
                - name : String
                - image : Images
                ..Methods..
                <<create>> ShirtEnum(name : String, image : Images)
                + getName() : String
                + getImage() : Images
                + getShirtEnum(image : Images) : ShirtEnum
            }
            enum SkinEnum{
                ..Fields..
                - name : String
                - image : Images
                ..Methods..
                <<create>> ShirtEnum(name : String, image : Images, origin : Origin)
                + getName() : String
                + getImage() : Images
                + getOrigins() : Origin*
                + getAllOriginAssets(origin : Origin) : SkinEnum
                + getAllOriginAssets(origin : Origin, skin : SkinEnum) : SkinEnum
                + getShirtEnum(image : Images) : ShirtEnum
                + getSkinEnum(image : Images) : SkinEnum
            }
        }
        class Beard{
            ..Methods..
            + <<create>> Beard(beard : BeardEnum)
            + <<create>> Beard(beard : BeardEnum, position : Vector2D)
            + <<create>> Beard(beard : BeardEnum, position : Vector2D, size : Vector2D, center : Boolean)
            + getImage() : Images
            + getColor() : HairColor
            + getBeardName() : String
        }
        class CharacterStyle{
            ..Fields..
            + additionalComponent() : ImageComponent
            ..Methods..
            + <<create>> CharacterStyle(eyes : Eyes, hair : Hair, shirt : Shirt, skin : Skin)
            + <<create>> CharacterStyle(eyes : Eyes, hair : Hair, shirt : Shirt, skin : Skin, additionalComponent : ImageComponent)
            + getEyes() : Eyes
            + getHair() : Hair
            + getShirt() : Shirt
            + getSkin() : Skin
            + getAdditionalComponent() : ImageComponent
            + assemble()
        }
        class Eyes{
            ..Methods..
            + <<create>> Eyes(eyes : EyesEnum)
            + <<create>> Eyes(eyes : EyesEnum, position : Vector2D)
            + <<create>> Eyes(eyes : EyesEnum, position : Vector2D, size : Vector2D, size : Boolean)
            + getName() : String
            + getColor() : EyeColor
            + getImage() : Images
            + getGender() : Gender
            + getOrigins() : Origin*
        }
        class FemaleStyleManager{
            ..Methods..
            + generateCommonCharacter() : CharacterStyle
            + generateHair(color : HairColor) : Hair
            + generateEyes(origin : Origin) : Eyes
        }
        class Hair{
            ..Methods..
            + <<create>> Hair(hair : HairEnum)
            + <<create>> Hair(hair : HairEnum, position : Vector2D)
            + <<create>> Hair(hair : HairEnum, position : Vector2D, size : Vector2D, center : Boolean)
            + getName() : String
            + getColor() : HairColor
            + getImage() : Images
            + getGender() : Gender
        }
        class MaleCharacterStyle{
            ..Methods..
            + <<create>> MaleCharacterStyle(beard : Beard, eyes : Eyes, hair : Hair, shirt : Shirt, skin : Skin)
            + getBeard() : Beard
            + assemble()
        }
        class MaleStyleManager{
            ..Methods..
            + generateCommonCharacter() : MaleCharacterStyle
            + generateHair(color : HairColor) : Hair
            + generateEyes(origin : Origin) : Eyes
            + generateBeard(color : HairColor) : Beard
        }
        class Shirt{
            ..Methods..
            + <<create>> Shirt(shirt : ShirtEnum)
            + <<create>> Shirt(shirt : ShirtEnum, position : Vector2D)
            + <<create>> Shirt(shirt : ShirtEnum, position : Vector2D, size : Vector2D, center : Boolean)
            + getName() : String
            + getImage() : Images
        }
        class Skin{
            ..Methods..
            + <<create>> Skin(skin : SkinEnum)
            + <<create>> Skin(skin : SkinEnum, position : Vector2D)
            + <<create>> Skin(skin : SkinEnum, position : Vector2D, size : Vector2D, center : Boolean)
            + getName() : String
            + getImage() : Images
            + getOrigins() : Origin
        }
        class StyleManager{
            ..Fields..
            rand : Random {static}
            ..Methods..
            + generateHairColor(age : Integer) : HairColor
            + generateSkin(origin : Origin) : Skin
            + generateHair(color : HairColor) : Hair
            + generateEyes(origin : Origin) : Eyes
            + generateShirt() : Shirt
            + generateShirt() : Shirt
        }
    }

    abstract class Character{
        ..Fields..
        age : Integer
        ..Methods..
        + <<create>> Character(position : Vector2D)
        + getOrigin() : Origin
        + getFirstName() : FirstName
        + getLastName() : LastName
        + getAge() : Integer
        + getHairColor() : HairColor
        + getCharacterStyle() : CharacterStyle
        + getCommonPastFact() : CommonPastFacts
        + OriginPastFact() : OriginPastFacts
        + getGenderPastFact() : GenderPastFacts
        + getSexualOrientationFact() : SexualOrientationFacts
        + getMentalStrength() : MentalStrength
        + getSexualOrientation() : SexualOrientation
        + getOriginThoughts() : OriginThoughts
        + getSexualOrientationThoughts() : SexualOrientationThoughts
        + setOrigin(origin : Origin)
        + setFirstName(firstname : FirstName)
        + setLastName(lastName : Lastname)
        + setAge(age : Integer)
        + setHairColor(hairColor : HairColor)
        + setCharacterStyle(characterStyle : CharacterStyle)
        + setCommonPastFact(commonPastFact : CommonPastFacts)
        + setOriginPastFact(originPastFact : OriginPastFacts)
        + setGenderPastFact(genderPastFact : GenderPastFacts)
        + setSexualOrientationPastFact(sexualOrientationPastFact : SexualOrientationFacts)
        + setMentalStrength(mentalStrength : MentalStrength)
        + setSexualOrientation(sexualOrientation : SexualOrientation)
        + setOriginThoughts(originThoughts : OriginThoughts)
        + setSexualOrientationThoughts(sexualOrientationThoughts : SexualOrientationThoughts)
    }
    interface CharacterBuilder <<interface>>{
        ..Methods..
        + reset()
        + generateIdentity()
        + generatePersonality()
        + generatePast()
        + generateThoughts()
        + generateStyle()
    }
    class CharacterDirector{
        ..Methods..
        + <<create>> CharacterDirector(builder : CharacterBuilder)
        + getBuilder() : CharacterBuilder
        + setBuilder(builder : CharacterBuilder)
        + generateCharacter()
    }
    class Female{
        ..Methods..
        + <<create>> Female(position : Vector2D)
    }
    class FemaleBuilder{
        ..Methods..
        + reset()
        + generateIdentity()
        + generatePersonality()
        + generatePast()
        + generateThoughts()
        + generateStyle()
        + getFemale() : Female
    }
    class Male{
        ..Methods..
        + <<create>> Male(position : Vector2D)
    }
    class MaleBuilder{
        ..Methods..
        + reset()
        + generateIdentity()
        + generatePersonality()
        + generatePast()
        + generateThoughts()
        + generateStyle()
        + getMale() : Male
    }
}

'Identity
character.identity.enums.FirstName "1" o--> "1\n- gender" character.identity.enums.Gender
character.identity.enums.FirstName "1" o--> "1\n- origin" character.identity.enums.Origin

character.identity.enums.LastName "1" o--> "1\n- origin" character.identity.enums.Origin

character.identity.IdentityManager ..> character.identity.enums.Origin : <<uses>>
character.identity.IdentityManager ..> character.identity.enums.FirstName : <<uses>>
character.identity.IdentityManager ..> character.identity.enums.LastName : <<uses>>

'Personality
character.personality.enums.pastFacts.CommonPastFacts "1" o--> "1\n- leaningMentalStrength" character.personality.enums.MentalStrength

character.personality.enums.pastFacts.GenderPastFacts "1" o--> "1\n- leaningMentalStrength" character.personality.enums.MentalStrength
character.personality.enums.pastFacts.GenderPastFacts "1" o--> "1\n- overridingThoughts" character.personality.enums.thought.GenderThoughts
character.personality.enums.pastFacts.GenderPastFacts "1" o--> "1\n- concernedGender" character.identity.enums.Gender

character.personality.enums.pastFacts.OriginPastFacts "1" o--> "1\n- leaningMentalStrength" character.personality.enums.MentalStrength
character.personality.enums.pastFacts.OriginPastFacts "1" o--> "1\n- overridingThoughts" character.personality.enums.thought.OriginThoughts
character.personality.enums.pastFacts.OriginPastFacts "1" o--> "1\n- concernedOrigins" character.identity.enums.Origin

character.personality.enums.pastFacts.SexualOrientationPastFacts "1" o--> "1\n- leaningMentalStrength" character.personality.enums.MentalStrength
character.personality.enums.pastFacts.SexualOrientationPastFacts "1" o--> "1\n- overridingThoughts" character.personality.enums.thought.SexualOrientationThoughts
character.personality.enums.pastFacts.SexualOrientationPastFacts "1" o--> "1\n- overridingSexualOrientation" character.personality.enums.SexualOrientation

character.personality.PersonalityManager ..> character.personality.enums.pastFacts.CommonPastFacts : <<uses>>
character.personality.PersonalityManager ..> character.personality.enums.pastFacts.GenderPastFacts : <<uses>>
character.personality.PersonalityManager ..> character.personality.enums.pastFacts.OriginPastFacts : <<uses>>
character.personality.PersonalityManager ..> character.personality.enums.pastFacts.SexualOrientationPastFacts : <<uses>>
character.personality.PersonalityManager ...> character.personality.enums.thought.OriginThoughts : <<uses>>
character.personality.PersonalityManager ...> character.personality.enums.thought.GenderThoughts : <<uses>>
character.personality.PersonalityManager ...> character.personality.enums.thought.SexualOrientationThoughts : <<uses>>
character.personality.PersonalityManager ...> character.personality.enums.MentalStrength : <<uses>>
character.personality.PersonalityManager ...> character.personality.enums.SexualOrientation : <<uses>>
character.personality.PersonalityManager ..> character.identity.enums.Gender : <<uses>>
character.personality.PersonalityManager ..> character.identity.enums.Origin : <<uses>>

'Style
character.style.enums.BeardEnum "1" o--> "1\n- color" character.style.enums.HairColor : <<uses>>

character.style.enums.EyesEnum "1" o--> "1\n- color" character.style.enums.EyeColor
character.style.enums.EyesEnum "1" o-> "1\n- gender" character.identity.enums.Gender
character.style.enums.EyesEnum "1" o-> "*\n- origins" character.identity.enums.Origin

character.style.enums.HairEnum "1" o--> "1\n- color" character.style.enums.HairColor
character.style.enums.HairEnum "1" o-> "1\n- gender" character.identity.enums.Gender

character.style.enums.SkinEnum "1" o-> "*\n- origins" character.identity.enums.Origin

character.style.Beard "1" o-> "1\n- beard" character.style.enums.BeardEnum

character.style.CharacterStyle --|> character.style.MaleCharacterStyle
character.style.CharacterStyle "1" o--> "1\n- eyes" character.style.Eyes
character.style.CharacterStyle "1" o--> "1\n- hair" character.style.Hair
character.style.CharacterStyle "1" o--> "1\n- shirt" character.style.Shirt
character.style.CharacterStyle "1" o--> "1\n- skin" character.style.Skin

character.style.Eyes "1" o--> "1\n- eyes" character.style.enums.EyesEnum
character.style.Eyes .> character.identity.enums.Origin : <<uses>>

character.style.FemaleStyleManager ...> character.style.enums.EyesEnum : <<uses>>
character.style.FemaleStyleManager ...> character.style.enums.HairEnum : <<uses>>
character.style.FemaleStyleManager ...> character.style.enums.ShirtEnum : <<uses>>
character.style.FemaleStyleManager ...> character.style.enums.SkinEnum : <<uses>>
character.style.FemaleStyleManager ...> character.style.enums.HairColor : <<uses>>
character.style.FemaleStyleManager ..> character.identity.enums.Origin : <<uses>>

character.style.Hair o--> character.style.enums.HairEnum
character.style.Hair o--> character.style.enums.HairColor

character.style.MaleCharacterStyle o--> character.style.Beard
character.style.MaleCharacterStyle ..> character.style.Eyes
character.style.MaleCharacterStyle ..> character.style.Hair
character.style.MaleCharacterStyle ..> character.style.Shirt
character.style.MaleCharacterStyle ..> character.style.Skin

character.style.MaleStyleManager .> character.style.MaleCharacterStyle :<<uses>>
character.style.MaleStyleManager .> character.style.Hair
character.style.MaleStyleManager .> character.style.enums.HairColor
character.style.MaleStyleManager .> character.style.Eyes
character.style.MaleStyleManager ..> character.identity.enums.Origin
character.style.MaleStyleManager .> character.style.Beard

character.style.Shirt "1" o--> "1\n- shirt" character.style.enums.ShirtEnum

character.style.Skin "1" o--> "1\n- skin" character.style.enums.SkinEnum
character.style.Skin ..> character.identity.enums.Origin

character.style.StyleManager --|> character.style.MaleStyleManager
character.style.StyleManager --|> character.style.FemaleStyleManager
character.style.StyleManager .> character.style.CharacterStyle : <<uses>>
character.style.StyleManager ...> character.style.enums.HairColor : <<uses>>
character.style.StyleManager ..> character.style.Skin : <<uses>>
character.style.StyleManager ..> character.style.Hair : <<uses>>
character.style.StyleManager ..> character.style.Eyes : <<uses>>

'Global
character.Character --|> character.Male
character.Character --|> character.Female
character.Character "1" o--> "1\n- commonPastFact" character.personality.enums.pastFacts.CommonPastFacts
character.Character "1" o--> "1\n- originPastFact" character.personality.enums.pastFacts.OriginPastFacts
character.Character "1" o--> "1\n- genderPastFact" character.personality.enums.pastFacts.GenderPastFacts
character.Character "1" o--> "1\n- sexualOrientationPastFact" character.personality.enums.pastFacts.SexualOrientationPastFacts
character.Character "1" o--> "1\n- originThoughts" character.personality.enums.thought.OriginThoughts
character.Character "1" o--> "1\n- genderThoughts" character.personality.enums.thought.GenderThoughts
character.Character "1" o--> "1\n- sexualOrientationThoughts" character.personality.enums.thought.SexualOrientationThoughts
character.Character "1" o--> "1\n- MentalStrength" character.personality.enums.MentalStrength
character.Character "1" o--> "1\n- sexualOrientation" character.personality.enums.SexualOrientation
character.Character "1" o--> "1\n- origin" character.identity.enums.Origin
character.Character "1" o--> "1\n- firstName" character.identity.enums.FirstName
character.Character "1" o--> "1\n- lastname" character.identity.enums.LastName
character.Character "1" o--> "1\n- characterStyle" character.style.CharacterStyle
character.Character "1" o--> "1\n- hairColor" character.style.enums.HairColor

character.CharacterDirector "1" o--> "1\n- builder" character.CharacterBuilder

character.FemaleBuilder "1" o--> "1\n- pm" character.personality.PersonalityManager
character.FemaleBuilder "1" o--> "1\n- fsm" character.style.FemaleStyleManager
character.FemaleBuilder "1" o--> "1\n- female" character.Female

character.MaleBuilder "1" o--> "1\n- pm" character.personality.PersonalityManager
character.MaleBuilder "1" o--> "1\n- msm" character.style.MaleStyleManager
character.MaleBuilder "1" o--> "1\n- male" character.Male

@enduml
